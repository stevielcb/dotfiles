################################################################################
# Software Compliance
################################################################################

# You'll need a few things before this will work:
############## Fedora/CentOS ###################
# 1. stow
# 2. git
#  For ponysay
# 3. texinfo
# 4. python36
#  For exa:
# 5. rust
# 6. cmake
# 7. cargo
# 8. libgit2
# 9. zlib-devel
################### Ubuntu #####################
# 1. stow
# 2. git
#  For ponysay
# 3. texinfo
# 4. python3
#################### Arch ######################
# 1. stow
# 2. git

PREREQS_VERSION="201907-08"

function install_prereqs_linux() {
  egrep -i '(fedora|centos)' /etc/os-release >/dev/null && install_prereqs_linux_redhat
  egrep -i 'ubuntu' /etc/os-release >/dev/null && install_prereqs_linux_ubuntu
  egrep -i '(arch|manjaro)' /etc/os-release >/dev/null && install_prereqs_linux_arch

  # Update build # to prevent the prereq check happening too often
  echo -n "${PREREQS_VERSION}" > ${PREREQS}
}

function install_prereqs_linux_redhat() {
  echo "Installing prerequisites ..."
  sudo zsh << EOF
curl -Lq https://download.opensuse.org/repositories/shells:zsh-users:zsh-syntax-highlighting/CentOS_7/shells:zsh-users:zsh-syntax-highlighting.repo > /etc/yum.repos.d/zsh-syntax-highlighting.repo
EOF

  sudo yum install -y centos-release-scl

  sudo yum-config-manager --enable rhel-server-rhscl-7-rpms

  sudo yum install -y \
    devtoolset-8 \
    fortune-mod \
    gcc-c++ \
    glide \
    golang \
    libstdc++-devel \
    ncurses-devel \
    neovim \
    python-devel \
    python36-devel \
    python36-neovim \
    zsh-syntax-highlighting

  # Make sure we have GhettoForge
  if ! [ -f /etc/yum.repos.d/gf.repo ]; then
    sudo rpm -Uvh --reinstall http://mirror.ghettoforge.org/distributions/gf/gf-release-latest.gf.el7.noarch.rpm
    rpm --import http://mirror.ghettoforge.org/distributions/gf/RPM-GPG-KEY-gf.el7
  fi

  sudo yum install -y \
    --enablerepo=gf-plus \
    zsh

  # Powerlevel10k
  do_git_update ~/.oh-my-zsh/custom/themes/powerlevel10k https://github.com/romkatv/powerlevel10k.git

  # ponysay
  if ! [ -d ~/ponysay ]; then
    ( git clone https://github.com/erkin/ponysay ~/ponysay && \
      cd ~/ponysay && \
      python3 setup.py --freedom=partial --private install && \
      /bin/mv -f ~/.local/bin/pony* ~/bin/ )
  else
    ( cd ~/ponysay && \
      git pull && \
      python3 setup.py --freedom=partial --private install && \
      /bin/mv -f ~/.local/bin/pony* ~/bin/ )
  fi

  # exa
  if ! cmd_exists exa; then
    ( git clone https://github.com/ogham/exa.git ~/exa && \
      cd ~/exa && \
      cargo build --release && \
      /bin/mv -f ./target/release/exa ~/bin/ )
  fi

  # YouCompleteMe
  if ! [ -d ~/.vim/bundle/YouCompleteMe ]; then
    YCM_FLAGS=(--clang-completer --go-completer --rust-completer)
    do_git_update ~/.vim/bundle/YouCompleteMe https://github.com/ycm-core/YouCompleteMe &&
      ( cd ~/.vim/bundle/YouCompleteMe && \
        git submodule update --init --recursive && \
        source /opt/rh/devtoolset-8/enable && \
        python3 ./install.py ${YCM_FLAGS[@]} \
      )
  fi

  install_prereqs_common
}

function install_prereqs_linux_ubuntu() {
  echo "Installing prerequisites ..."

  sudo add-apt-repository -y ppa:neovim-ppa/stable

  sudo apt install -y \
    cmatrix \
    datamash \
    fortune-mod \
    g++ \
    golang \
    golang-glide \
    golang-golang-x-tools \
    htop \
    httpie \
    jq \
    libstdc++-8-dev \
    libncurses-dev \
    ncdu \
    python-dev \
    python3-dev \
    vim-youcompleteme

  # LinuxBrew
  if ! [ -d /home/linuxbrew ]; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
  fi

  # Universal Ctags
  brew install \
    --HEAD universal-ctags/universal-ctags/universal-ctags

  brew install \
    libpcap

  brew install \
    ack \
    asciinema \
    autoconf \
    automake \
    bat \
    bvi \
    cask \
    cmake \
    colordiff \
    csvkit \
    diff-so-fancy \
    dos2unix \
    exa \
    fzf \
    glances \
    howdoi \
    iftop \
    libmagic \
    libtool \
    mycli \
    neovim \
    node \
    npm \
    nyancat \
    packer \
    pgcli \
    pkg-config \
    ponysay \
    prettyping \
    ripgrep \
    rust \
    task \
    tldr \
    urlview

  brew install \
    tmux --HEAD

  # Python packages
  sudo pip install -U \
    pipenv \
    poetry \
    powerline-status \
    saws

  install_prereqs_common

  # MOTD server+client
  go get -u github.com/stevenwoah/motd-server
  go get -u github.com/stevenwoah/motd-client

  # Sift
  go get -u github.com/svent/sift

  # FiraCode Nerd Fonts for Powerlevel10k
  FC_FONT="${HOME}/.fonts/Fura Code Bold Nerd Font Complete.ttf"
  if ! [ -f ${FC_FONT} ]; then
    mkdir -p ~/.fonts
    TMP_ZIP="${HOME}/FiraCode.zip"
    curl -Ls https://github.com/ryanoasis/nerd-fonts/releases/download/v2.0.0/FiraCode.zip > ${TMP_ZIP} && \
      unzip -u -d ~/.fonts/ ${TMP_ZIP} && \
      /bin/rm -f ${TMP_ZIP}
    fc-cache -v
  fi

  # Powerlevel10k
  do_git_update ~/.oh-my-zsh/custom/themes/powerlevel10k https://github.com/romkatv/powerlevel10k.git

  # npm-groovy-lint
  npm install -g npm-groovy-lint
}

function install_prereqs_linux_arch() {
  echo "Installing prerequisites ..."
  sudo pacman -Syu --needed --noconfirm \
    bat \
    bison \
    datamash \
    diff-so-fancy \
    exa \
    fortune-mod \
    fzf \
    gcc \
    glances \
    glide \
    go-pie \
    golang-golang-x-tools \
    htop \
    httpie \
    jq \
    ncdu \
    neovim \
    prettyping \
    python-docutils \
    python-neovim \
    python-pip \
    python-psycopg2 \
    ripgrep \
    tldr \
    unzip \
    z

  # LinuxBrew
  if ! [ -d /home/linuxbrew ]; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
  fi

  # Universal Ctags
  brew install \
    --HEAD universal-ctags/universal-ctags/universal-ctags

  brew install \
    asciinema \
    bvi \
    cask \
    cmake \
    cmatrix \
    colordiff \
    csvkit \
    dos2unix \
    iftop \
    libmagic \
    libtool \
    mycli \
    node \
    npm \
    nyancat \
    pgcli \
    ponysay \
    rust \
    task \
    urlview

  brew install \
    tmux --HEAD

  # Python packages
  sudo pip install -U \
    powerline-status \
    saws

  # Python3 packages
  sudo pip3 install -U \
    neovim \
    pipenv \
    poetry

  install_prereqs_common

  # MOTD server+client
  go get -u github.com/stevenwoah/motd-server
  go get -u github.com/stevenwoah/motd-client

  # Sift
  go get -u github.com/svent/sift

  # FiraCode Nerd Fonts for Powerlevel10k
  FC_FONT="${HOME}/.fonts/Fura Code Bold Nerd Font Complete.ttf"
  if ! [ -f ${FC_FONT} ]; then
    mkdir -p ~/.fonts
    TMP_ZIP="${HOME}/FiraCode.zip"
    curl -Ls https://github.com/ryanoasis/nerd-fonts/releases/download/v2.0.0/FiraCode.zip > ${TMP_ZIP} && \
      unzip -u -d ~/.fonts/ ${TMP_ZIP} && \
      /bin/rm -f ${TMP_ZIP}
    fc-cache -v
  fi

  # Powerlevel10k
  do_git_update ~/.oh-my-zsh/custom/themes/powerlevel10k https://github.com/romkatv/powerlevel10k.git

  # npm-groovy-lint
  npm install -g npm-groovy-lint
}

# Ensure LinuxBrew is in the PATH before we try installing stuff
export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"

# Check if we need to install software
if ! [ -f ${PREREQS} ]; then
  # We haven't done a prereq install if this file doesn't already exist
  install_prereqs_linux
else
  # The contents of the $PREREQS file will just be a build number. When the
  # prereqs need to be updated, $PREREQS_VERSION should be incremented.
  LAST_UPDATE=$(cat ${PREREQS})
  if [ "${LAST_UPDATE}" != "${PREREQS_VERSION}" ]; then
    install_prereqs_linux
  fi
fi;

################################################################################
# Aliases
################################################################################

alias ss="sudo --preserve-env=HOME -s"

################################################################################
# Environment Variables
################################################################################

ZSH_PLUGINS+=(
  brew
  cask
  systemd
  zsh-morpho
)

# morpho screensaver
zstyle ":morpho" screen-saver "cmatrix"
zstyle ":morpho" arguments "-absC magenta"
zstyle ":morpho" delay "115"
zstyle ":morpho" check-interval "60"

egrep -i 'ubuntu' /etc/os-release >/dev/null && ZSH_PLUGINS+=(ubuntu ufw)
egrep -i 'fedora' /etc/os-release >/dev/null && ZSH_PLUGINS+=(dnf)
egrep -i 'centos' /etc/os-release >/dev/null && ZSH_PLUGINS+=(yum)
egrep -i '(arch|manjaro)' /etc/os-release >/dev/null && ZSH_PLUGINS+=(archlinux)

# ZSH_SYNTAX=/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# egrep -i "(alpine|arch|manjaro)" /etc/os-release 2>&1 >/dev/null && ZSH_SYNTAX=/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# egrep -i "(arch)" /etc/os-release 2>&1 >/dev/null && ZSH_SYNTAX=/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

ZSH_THEME="powerlevel10k/powerlevel10k"
ZSH_COLORIZE_STYLE="friendly"

POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(root_indicator ssh background_jobs history)

export PATH="${HOME}/.local/vim/bin:${PATH}"
